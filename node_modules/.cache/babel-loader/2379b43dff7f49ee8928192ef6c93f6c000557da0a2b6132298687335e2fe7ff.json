{"ast":null,"code":"var _jsxFileName = \"/home/inigoalda/prototype-ping/src/components/WorkArea.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport './WorkArea.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction WorkArea() {\n  _s();\n  // series of tabs with different editors monaco representing different file types\n  // each tab has a close button\n  // each tab has a title\n\n  const [tabs, setTabs] = useState([]);\n  const [activeTab, setActiveTab] = useState(null);\n  const handleTabClick = tab => {\n    setActiveTab(tab);\n  };\n  const handleCloseTab = tab => {\n    setTabs(tabs.filter(t => t !== tab));\n    if (activeTab === tab) {\n      setActiveTab(null);\n    }\n  };\n  const handleNewTab = () => {\n    const newTab = {\n      title: 'New Tab',\n      content: '',\n      type: 'text'\n    };\n    setTabs([...tabs, newTab]);\n    setActiveTab(newTab);\n  };\n  const handleTabChange = content => {\n    const updatedTabs = tabs.map(t => t === activeTab ? {\n      ...t,\n      content\n    } : t);\n    setTabs(updatedTabs);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"work-area\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"tabs\",\n      children: [tabs.map(tab => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `tab ${activeTab === tab ? 'active' : ''}`,\n        onClick: () => handleTabClick(tab),\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: tab.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleCloseTab(tab),\n          children: \"X\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 25\n        }, this)]\n      }, tab.title, true, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 21\n      }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleNewTab,\n        children: \"+\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"editor\",\n      children: activeTab && /*#__PURE__*/_jsxDEV(\"textarea\", {\n        value: activeTab.content,\n        onChange: e => handleTabChange(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 9\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"work-area\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 9\n  }, this);\n}\n_s(WorkArea, \"U/9ZXXtVppthMGcoFUAsQXduXqM=\");\n_c = WorkArea;\nexport default WorkArea;\nvar _c;\n$RefreshReg$(_c, \"WorkArea\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","WorkArea","_s","tabs","setTabs","activeTab","setActiveTab","handleTabClick","tab","handleCloseTab","filter","t","handleNewTab","newTab","title","content","type","handleTabChange","updatedTabs","map","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","value","onChange","e","target","_c","$RefreshReg$"],"sources":["/home/inigoalda/prototype-ping/src/components/WorkArea.jsx"],"sourcesContent":["import React, {useState} from 'react';\r\nimport './WorkArea.css';\r\n\r\nfunction WorkArea() {\r\n    // series of tabs with different editors monaco representing different file types\r\n    // each tab has a close button\r\n    // each tab has a title\r\n\r\n    const [tabs, setTabs] = useState([]);\r\n    const [activeTab, setActiveTab] = useState(null);\r\n\r\n    const handleTabClick = (tab) => {\r\n        setActiveTab(tab);\r\n    }\r\n\r\n    const handleCloseTab = (tab) => {\r\n        setTabs(tabs.filter(t => t !== tab));\r\n        if (activeTab === tab) {\r\n            setActiveTab(null);\r\n        }\r\n    }\r\n\r\n    const handleNewTab = () => {\r\n        const newTab = {\r\n            title: 'New Tab',\r\n            content: '',\r\n            type: 'text',\r\n        };\r\n        setTabs([...tabs, newTab]);\r\n        setActiveTab(newTab);\r\n    }\r\n\r\n    const handleTabChange = (content) => {\r\n        const updatedTabs = tabs.map(t => t === activeTab ? {...t, content} : t);\r\n        setTabs(updatedTabs);\r\n    }\r\n\r\n    return (\r\n        <div className=\"work-area\">\r\n            <div className=\"tabs\">\r\n                {tabs.map(tab => (\r\n                    <div\r\n                        key={tab.title}\r\n                        className={`tab ${activeTab === tab ? 'active' : ''}`}\r\n                        onClick={() => handleTabClick(tab)}\r\n                    >\r\n                        <span>{tab.title}</span>\r\n                        <button onClick={() => handleCloseTab(tab)}>X</button>\r\n                    </div>\r\n                ))}\r\n                <button onClick={handleNewTab}>+</button>\r\n            </div>\r\n            <div className=\"editor\">\r\n                {activeTab && (\r\n                    <textarea\r\n                        value={activeTab.content}\r\n                        onChange={(e) => handleTabChange(e.target.value)}\r\n                    />\r\n                )}\r\n            </div>\r\n        </div>\r\n    );\r\n\r\n    return (\r\n        <div className=\"work-area\">\r\n\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default WorkArea;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}